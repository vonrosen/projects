package org.hunter.leetcode;

import java.util.Arrays;

public class ShortestPathColors {

    public void printArr(int[] arr) {
        for (int i = 0; i < arr.length; ++i) {
            System.out.println(arr[i]);
        }
    }

    public static void main(String[] args) {
        ShortestPathColors s = new ShortestPathColors();

//        100
//        [[23,30],[63,11],[92,53],[53,51],[74,47],[19,13],[25,67],[22,62],[15,57],[61,7],[84,11],[54,1],[1,67],[28,12],[93,3],[57,78],[43,17],[21,12],[48,30],[81,19],[76,11],[64,61],[37,3],[65,54],[81,73],[39,4],[29,64],[72,59],[37,49],[22,19],[52,66],[34,85],[62,29],[19,68],[43,74],[93,50],[91,22],[2,69],[6,9],[27,44],[19,41],[21,99],[18,96],[42,26],[88,38],[54,2],[31,60],[92,1],[12,49],[43,58],[31,37],[89,83],[15,42],[98,15],[96,26],[63,20],[54,47],[12,94],[10,7],[16,6],[14,17],[97,6],[6,28],[84,33],[17,83],[76,0],[29,14],[53,24],[61,41],[66,10],[2,37],[72,81],[85,47],[29,36],[94,24],[17,42],[53,80],[1,38],[56,49],[13,96],[64,9],[37,31],[45,31],[35,12],[91,80],[0,39],[38,41],[34,18],[36,8],[12,86],[9,83],[17,18],[31,16],[64,81],[17,17],[65,75],[32,93],[40,6],[8,28],[57,84],[24,87],[33,75],[86,38],[34,33],[79,40],[60,35],[99,79],[72,9]]
//        [[5,78],[33,51],[92,13],[32,15],[73,8],[40,41],[71,16],[86,47],[33,94],[57,44],[68,9],[89,52],[13,97],[40,15],[61,79],[51,2],[77,86],[66,24],[54,12],[42,92],[29,44],[11,55],[98,35],[63,59],[79,95],[33,90],[63,85],[78,10],[14,7],[8,36],[54,41],[95,74],[67,72],[83,87],[77,81],[66,43],[59,58],[34,19],[46,34],[24,3],[50,0],[47,83],[37,87],[92,92],[0,94],[25,2],[72,97],[79,24],[16,15],[31,33],[4,46],[65,63],[76,18],[64,89],[11,85],[68,62],[26,91],[47,75],[17,43],[70,22],[53,98],[55,39],[53,48],[45,51],[51,24],[79,50],[82,73],[27,26],[76,11],[1,50],[59,63],[42,78],[60,35],[47,51],[76,72],[96,35],[97,12],[87,6],[33,40],[15,35],[46,37],[57,59],[89,48],[3,27],[4,61],[34,40],[60,61],[32,43],[40,12],[60,23],[90,64],[81,75],[36,61],[47,73],[89,29],[34,78],[45,74],[75,13],[86,76],[13,93],[94,56],[93,91],[53,19],[95,6],[20,12],[2,45],[49,33],[20,78],[50,56],[79,14],[85,32],[65,45],[0,48],[81,82],[61,87],[50,15],[43,70],[86,38],[62,2],[89,97],[17,14],[52,2],[46,87],[0,16],[16,54],[86,5],[2,69],[80,77],[37,3],[89,59],[45,32],[47,17],[19,29],[69,81],[12,28],[52,73],[88,1],[10,92],[1,80],[21,57],[11,74],[19,25],[11,15],[25,29],[44,88],[86,13],[60,22],[97,55],[3,95],[73,51],[85,56],[58,97],[78,16],[42,84],[26,98],[46,10],[28,18],[14,12],[76,26],[79,12],[58,40],[72,89],[5,81],[41,65],[46,28],[18,25],[65,5],[0,85],[10,65],[28,56],[39,49],[22,17],[30,26],[53,6],[12,12],[16,16],[70,52],[96,55],[37,10],[72,15],[80,84],[50,60],[58,1],[76,74],[96,45],[42,77],[15,22],[99,19],[86,48],[98,11],[50,4],[71,44],[49,10],[4,31],[67,52],[52,94],[35,75],[83,63],[7,7],[99,38],[71,67],[18,84],[80,46],[80,15],[18,86],[10,75],[81,93],[67,31],[72,69],[18,24],[57,42],[93,8],[93,58]]
        // exp:
        // [0,6,10,3,11,9,2,10,15,8,9,6,7,8,5,7,1,3,4,7,6,-1,9,9,2,5,3,11,8,10,2,7,-1,6,-1,9,12,8,6,1,7,8,4,5,9,11,13,2,1,2,7,3,7,6,9,7,9,8,6,8,8,9,9,5,12,9,8,6,8,11,-1,-1,7,3,6,3,9,5,5,-1,7,8,9,3,5,1,5,5,13,13,7,11,5,9,1,11,10,7,7,-1]
        // out:
        // [0,6,10,3,11,9,2,10,-1,8,9,6,7,8,5,7,1,3,4,7,6,-1,9,9,2,5,3,11,8,10,2,7,-1,6,-1,9,12,8,6,1,7,8,4,5,9,11,13,2,1,2,7,3,7,6,9,7,9,8,6,8,8,9,9,5,12,9,8,6,8,11,-1,-1,7,3,6,3,9,5,5,-1,7,8,9,3,5,1,5,5,13,13,7,11,5,9,1,11,10,7,7,-1]
        // to 8, exp 15, mine = -1

        int n = 100;
        int[][] red_edges = new int[][] { { 23, 30 }, { 63, 11 }, { 92, 53 }, { 53, 51 }, { 74, 47 }, { 19, 13 },
                { 25, 67 }, { 22, 62 }, { 15, 57 }, { 61, 7 }, { 84, 11 }, { 54, 1 }, { 1, 67 }, { 28, 12 }, { 93, 3 },
                { 57, 78 }, { 43, 17 }, { 21, 12 }, { 48, 30 }, { 81, 19 }, { 76, 11 }, { 64, 61 }, { 37, 3 },
                { 65, 54 }, { 81, 73 }, { 39, 4 }, { 29, 64 }, { 72, 59 }, { 37, 49 }, { 22, 19 }, { 52, 66 },
                { 34, 85 }, { 62, 29 }, { 19, 68 }, { 43, 74 }, { 93, 50 }, { 91, 22 }, { 2, 69 }, { 6, 9 }, { 27, 44 },
                { 19, 41 }, { 21, 99 }, { 18, 96 }, { 42, 26 }, { 88, 38 }, { 54, 2 }, { 31, 60 }, { 92, 1 },
                { 12, 49 }, { 43, 58 }, { 31, 37 }, { 89, 83 }, { 15, 42 }, { 98, 15 }, { 96, 26 }, { 63, 20 },
                { 54, 47 }, { 12, 94 }, { 10, 7 }, { 16, 6 }, { 14, 17 }, { 97, 6 }, { 6, 28 }, { 84, 33 }, { 17, 83 },
                { 76, 0 }, { 29, 14 }, { 53, 24 }, { 61, 41 }, { 66, 10 }, { 2, 37 }, { 72, 81 }, { 85, 47 },
                { 29, 36 }, { 94, 24 }, { 17, 42 }, { 53, 80 }, { 1, 38 }, { 56, 49 }, { 13, 96 }, { 64, 9 },
                { 37, 31 }, { 45, 31 }, { 35, 12 }, { 91, 80 }, { 0, 39 }, { 38, 41 }, { 34, 18 }, { 36, 8 },
                { 12, 86 }, { 9, 83 }, { 17, 18 }, { 31, 16 }, { 64, 81 }, { 17, 17 }, { 65, 75 }, { 32, 93 },
                { 40, 6 }, { 8, 28 }, { 57, 84 }, { 24, 87 }, { 33, 75 }, { 86, 38 }, { 34, 33 }, { 79, 40 },
                { 60, 35 }, { 99, 79 }, { 72, 9 } };
        int[][] blue_edges = new int[][] { { 5, 78 }, { 33, 51 }, { 92, 13 }, { 32, 15 }, { 73, 8 }, { 40, 41 },
                { 71, 16 }, { 86, 47 }, { 33, 94 }, { 57, 44 }, { 68, 9 }, { 89, 52 }, { 13, 97 }, { 40, 15 },
                { 61, 79 }, { 51, 2 }, { 77, 86 }, { 66, 24 }, { 54, 12 }, { 42, 92 }, { 29, 44 }, { 11, 55 },
                { 98, 35 }, { 63, 59 }, { 79, 95 }, { 33, 90 }, { 63, 85 }, { 78, 10 }, { 14, 7 }, { 8, 36 },
                { 54, 41 }, { 95, 74 }, { 67, 72 }, { 83, 87 }, { 77, 81 }, { 66, 43 }, { 59, 58 }, { 34, 19 },
                { 46, 34 }, { 24, 3 }, { 50, 0 }, { 47, 83 }, { 37, 87 }, { 92, 92 }, { 0, 94 }, { 25, 2 }, { 72, 97 },
                { 79, 24 }, { 16, 15 }, { 31, 33 }, { 4, 46 }, { 65, 63 }, { 76, 18 }, { 64, 89 }, { 11, 85 },
                { 68, 62 }, { 26, 91 }, { 47, 75 }, { 17, 43 }, { 70, 22 }, { 53, 98 }, { 55, 39 }, { 53, 48 },
                { 45, 51 }, { 51, 24 }, { 79, 50 }, { 82, 73 }, { 27, 26 }, { 76, 11 }, { 1, 50 }, { 59, 63 },
                { 42, 78 }, { 60, 35 }, { 47, 51 }, { 76, 72 }, { 96, 35 }, { 97, 12 }, { 87, 6 }, { 33, 40 },
                { 15, 35 }, { 46, 37 }, { 57, 59 }, { 89, 48 }, { 3, 27 }, { 4, 61 }, { 34, 40 }, { 60, 61 },
                { 32, 43 }, { 40, 12 }, { 60, 23 }, { 90, 64 }, { 81, 75 }, { 36, 61 }, { 47, 73 }, { 89, 29 },
                { 34, 78 }, { 45, 74 }, { 75, 13 }, { 86, 76 }, { 13, 93 }, { 94, 56 }, { 93, 91 }, { 53, 19 },
                { 95, 6 }, { 20, 12 }, { 2, 45 }, { 49, 33 }, { 20, 78 }, { 50, 56 }, { 79, 14 }, { 85, 32 },
                { 65, 45 }, { 0, 48 }, { 81, 82 }, { 61, 87 }, { 50, 15 }, { 43, 70 }, { 86, 38 }, { 62, 2 },
                { 89, 97 }, { 17, 14 }, { 52, 2 }, { 46, 87 }, { 0, 16 }, { 16, 54 }, { 86, 5 }, { 2, 69 }, { 80, 77 },
                { 37, 3 }, { 89, 59 }, { 45, 32 }, { 47, 17 }, { 19, 29 }, { 69, 81 }, { 12, 28 }, { 52, 73 },
                { 88, 1 }, { 10, 92 }, { 1, 80 }, { 21, 57 }, { 11, 74 }, { 19, 25 }, { 11, 15 }, { 25, 29 },
                { 44, 88 }, { 86, 13 }, { 60, 22 }, { 97, 55 }, { 3, 95 }, { 73, 51 }, { 85, 56 }, { 58, 97 },
                { 78, 16 }, { 42, 84 }, { 26, 98 }, { 46, 10 }, { 28, 18 }, { 14, 12 }, { 76, 26 }, { 79, 12 },
                { 58, 40 }, { 72, 89 }, { 5, 81 }, { 41, 65 }, { 46, 28 }, { 18, 25 }, { 65, 5 }, { 0, 85 }, { 10, 65 },
                { 28, 56 }, { 39, 49 }, { 22, 17 }, { 30, 26 }, { 53, 6 }, { 12, 12 }, { 16, 16 }, { 70, 52 },
                { 96, 55 }, { 37, 10 }, { 72, 15 }, { 80, 84 }, { 50, 60 }, { 58, 1 }, { 76, 74 }, { 96, 45 },
                { 42, 77 }, { 15, 22 }, { 99, 19 }, { 86, 48 }, { 98, 11 }, { 50, 4 }, { 71, 44 }, { 49, 10 },
                { 4, 31 }, { 67, 52 }, { 52, 94 }, { 35, 75 }, { 83, 63 }, { 7, 7 }, { 99, 38 }, { 71, 67 }, { 18, 84 },
                { 80, 46 }, { 80, 15 }, { 18, 86 }, { 10, 75 }, { 81, 93 }, { 67, 31 }, { 72, 69 }, { 18, 24 },
                { 57, 42 }, { 93, 8 }, { 93, 58 } };

//        8
//        [[7,5],[0,0],[0,4],[5,1],[3,0],[1,5],[2,1],[2,3]]
//        [[2,3],[6,7],[6,2],[0,7],[7,7],[1,4],[7,4],[6,5],[2,5],[6,1],[1,0],[3,3],[5,4],[5,6],[7,5],[2,6],[5,1],[5,5],[1,5],[6,4]]
        // exp: [0,3,-1,-1,1,2,3,1]
        // out: [0,4,-1,-1,1,2,4,1]
        // blue 0,7 - 7,5 - 5,1

//        int n = 8;
//        int[][] red_edges = new int[][] {{7,5},{0,0},{0,4},{5,1},{3,0},{1,5},{2,1},{2,3}};
//        int[][] blue_edges = new int[][] {{2,3},{6,7},{6,2},{0,7},{7,7},{1,4},{7,4},{6,5},{2,5},{6,1},{1,0},{3,3},{5,4},{5,6},{7,5},{2,6},{5,1},{5,5},{1,5},{6,4}};

//        9
//        [[1,8],[5,7],[1,2],[2,2],[7,4],[7,2],[3,8],[7,0],[1,5],[2,7],[2,3],[6,3],[3,0],[4,8],[7,5],[1,6],[3,7]]
//        [[2,1],[1,4],[0,3],[0,5],[1,5],[8,2],[5,8],[2,6],[5,3],[6,7],[4,0],[2,2]]
        // exp: [0,5,3,1,8,1,5,2,2]

//        5
//        [[2,2],[0,4],[4,2],[4,3],[2,4],[0,0],[0,1],[2,3],[1,3]]
//        [[0,4],[1,0],[1,4],[0,0],[4,0]]
        // e: [0,1,2,2,1]

//        int n = 5;
//        int[][] red_edges = new int[][] {
//            {2, 2},
//            {0, 4},
//            {4, 2},
//            {4, 3},
//            {2, 4},
//            {0, 0},
//            {0, 1},
//            {2, 3},
//            {1, 3}
//        };
//        int[][] blue_edges = new int[][] {
//            {0, 4},
//            {1, 0},
//            {1, 4},
//            {0, 0},
//            {4, 0}
//        };

//        int n = 2;
//        int[][] red_edges = new int[][] { };
//        int[][] blue_edges = new int[][] { };

//        int n = 9;
//		int[][] red_edges = new int[][] { { 1, 8 }, { 5, 7 }, { 1, 2 }, { 2, 2 }, { 7, 4 }, { 7, 2 }, { 3, 8 },
//				{ 7, 0 }, { 1, 5 }, { 2, 7 }, { 2, 3 }, { 6, 3 }, { 3, 0 }, { 4, 8 }, { 7, 5 }, { 1, 6 }, { 3, 7 } };
//		int[][] blue_edges = new int[][] { { 2, 1 }, { 1, 4 }, { 0, 3 }, { 0, 5 }, { 1, 5 }, { 8, 2 }, { 5, 8 },
//				{ 2, 6 }, { 5, 3 }, { 6, 7 }, { 4, 0 }, { 2, 2 } };

//        int n = 9;
//        int [][] red_edges = new int[][]
//                  {{2,1},{5,1},{6,4},{1,0},{7,4},{0,8},{7,8},{7,6},{6,8},{3,1},{2,7},{3,6},{8,3},{0,0},{5,0},{8,1},{4,8},{4,7},{8,0},{8,5}};
//        int [][] blue_edges = new int[][]
//                  {{1,5},{2,7},{2,0},{5,2},{8,5},{1,7},{6,1},{1,4},{4,1},{3,6},{8,8},{7,6},{1,1},{6,8},{2,8},{7,7},{7,3},{1,2},{2,6}};

//        [[2,1],[5,1],[6,4],[1,0],[7,4],[0,8],[7,8],[7,6],[6,8],[3,1],[2,7],[3,6],[8,3],[0,0],[5,0],[8,1],[4,8],[4,7],[8,0],[8,5]]
//        [[1,5],[2,7],[2,0],[5,2],[8,5],[1,7],[6,1],[1,4],[4,1],[3,6],[8,8],[7,6],[1,1],[6,8],[2,8],[7,7],[7,3],[1,2],[2,6]]

//        5
//        [[3,2],[4,1],[1,4],[2,4]]
//        [[2,3],[0,4],[4,3],[4,4],[4,0],[1,0]]

//        6
//        [[2,3],[0,5],[3,1],[5,0],[3,0],[0,0]]
//        [[1,2],[3,2],[1,0],[2,2],[5,2]]
        // exp: [0,-1,2,3,-1,1]

//        7
//        [[0,2],[1,3],[1,5],[4,0],[4,2]]
//        [[1,2],[4,3],[3,1],[6,1],[1,5],[6,0],[5,1],[1,4],[6,3],[1,3],[0,1],[2,1]]
        // exp: [0,1,1,2,-1,2,-1]

//        int n = 7;
//        int [][] red_edges = new int[][] {
//            {0, 2},
//            {1, 3},
//            {1, 5},
//            {4, 0},
//            {4, 2}
//        };
//        int [][] blue_edges = new int[][] {
//            {1, 2},
//            {4, 3},
//            {3, 1},
//            {6, 1},
//            {1, 5},
//            {6, 0},
//            {5, 1},
//            {1, 4},
//            {6, 3},
//            {1, 3},
//            {0, 1},
//            {2, 1}
//        };

//      5
//      [[0,1],[1,2],[2,3],[3,4]]
//      [[1,2],[2,3],[3,1]]
        // expected: [0,1,2,3,7]

//                  5
//                  [[3,2],[4,1],[1,4],[2,4]]
//                  [[2,3],[0,4],[4,3],[4,4],[4,0],[1,0]]
        // exp: [0,2,-1,-1,1]

//        6
//        [[1,5],[2,2],[5,5],[3,0],[4,5],[2,4],[4,1],[1,0],[1,2],[5,2],[2,3],[0,1]]
//        [[4,4],[2,5],[1,1],[5,4],[3,3]]
        // exp: [0,1,3,-1,4,3]

//        int n = 6;
//        int [][] red_edges = new int[][] {
//            {1, 5},
//            {2, 2},
//            {5, 5},
//            {3, 0},
//            {4, 5},
//            {2, 4},
//            {4, 1},
//            {1, 0},
//            {1, 2},
//            {5, 2},
//            {2, 3},
//            {0, 1}
//        };
//        int [][] blue_edges = new int[][] {
//            {4, 4},
//            {2, 5},
//            {1, 1},
//            {5, 4},
//            {3, 3}
//        };

//            int n = 5;
//            int [][] red_edges = new int[][] {
//                {3, 2},
//                {4, 1},
//                {1, 4},
//                {2, 4}
//            };
//            int [][] blue_edges = new int[][] {
//                {2, 3},
//                {0, 4},
//                {4, 3},
//                {4, 4},
//                {4, 0},
//                {1, 0}
//            };

//          int n = 5;
//          int [][] red_edges = new int[][] {
//              {0, 1},
//              {1, 2},
//              {2, 3},
//              {3, 4}
//          };
//          int [][] blue_edges = new int[][] {
//              {1, 2},
//              {2, 3},
//              {3, 1}
//          };

//        int [][] red_edges = new int[][] {
//                {0, 1},
//                {1, 2}
//        };
//        int [][] blue_edges = new int[][] {};

//        int [][] red_edges = new int[][] {
//            {0, 1}
//        };
//        int [][] blue_edges = new int[][] {
//            {1, 2}
//        };

//        int n = 3;
//        int [][] red_edges = new int[][] {
//            {0, 1},
//            {1, 2}
//        };
//        int [][] blue_edges = new int[][] {
//        };
//        int [][] red_edges = new int[][] {
//            {0, 1},
//            {0, 2}
//        };
//        int [][] blue_edges = new int[][] {
//            {1, 0}
//        };

        s.printArr(s.shortestAlternatingPaths(n, red_edges, blue_edges));
    }

    public int[] shortestAlternatingPaths(int n, int[][] red_edges, int[][] blue_edges) {
        int[][] red = new int[100][100];
        int[][] blue = new int[100][100];
        int[] results = new int[n];

        if (red_edges.length == 0 && blue_edges.length == 0) {
            for (int i = 0; i < n; ++i) {
                if (i > 0) {
                    results[i] = -1;
                }
            }
        }

        for (int i = 0; i < red_edges.length + blue_edges.length; ++i) {
            // red first graph
            for (int r = 0; r < red_edges.length; ++r) {
                if (red[red_edges[r][0]][red_edges[r][1]] == 0 && red_edges[r][0] == 0) {
                    red[red_edges[r][0]][red_edges[r][1]] = 1;
                    results[red_edges[r][1]] = 1;
                }

                for (int rr = 0; rr < red.length; ++rr) {
                    if (red[rr][red_edges[r][0]] > 0 && red[rr][red_edges[r][0]] % 2 == 0) {
                        if (red[red_edges[r][0]][red_edges[r][1]] == 0) {
                            red[red_edges[r][0]][red_edges[r][1]] = red[rr][red_edges[r][0]] + 1;
                        }
                        else {
//                            red[red_edges[r][0]][red_edges[r][1]] = Math.max(red[rr][red_edges[r][0]] + 1,
//                                    red[red_edges[r][0]][red_edges[r][1]]);
                            red[red_edges[r][0]][red_edges[r][1]] = red[rr][red_edges[r][0]] + 1;
                        }

                        if (red[red_edges[r][0]][red_edges[r][1]] > 0) {
                            if (results[red_edges[r][1]] == 0
                                    || results[red_edges[r][1]] > red[red_edges[r][0]][red_edges[r][1]]) {
                                results[red_edges[r][1]] = red[red_edges[r][0]][red_edges[r][1]];
                            }
                        }
                    }
                }
            }

//            if (results[1] > 0) {
//                System.out.println("gt");
//            }

            for (int b = 0; b < blue_edges.length; ++b) {
                for (int r = 0; r < red.length; ++r) {
                    if (red[r][blue_edges[b][0]] > 0 && red[r][blue_edges[b][0]] % 2 != 0) {
                        if (red[blue_edges[b][0]][blue_edges[b][1]] == 0) {
                            red[blue_edges[b][0]][blue_edges[b][1]] = red[r][blue_edges[b][0]] + 1;
                        }
                        else {
//                            red[blue_edges[b][0]][blue_edges[b][1]] =
//                                    Math.max(red[blue_edges[b][0]][blue_edges[b][1]], red[r][blue_edges[b][0]] + 1);

                            red[blue_edges[b][0]][blue_edges[b][1]] = red[r][blue_edges[b][0]] + 1;
                        }

                        if (results[blue_edges[b][1]] == 0
                                || results[blue_edges[b][1]] > red[blue_edges[b][0]][blue_edges[b][1]]) {
                            results[blue_edges[b][1]] = red[blue_edges[b][0]][blue_edges[b][1]];
                        }
                    }
                }
            }

//            if (results[1] > 0) {
//                System.out.println("gt1");
//            }

            // blue first graph
            for (int b = 0; b < blue_edges.length; ++b) {
                if (blue[blue_edges[b][0]][blue_edges[b][1]] == 0 && blue_edges[b][0] == 0) {
                    blue[blue_edges[b][0]][blue_edges[b][1]] = 1;
                    results[blue_edges[b][1]] = 1;
                }

                for (int bb = 0; bb < blue.length; ++bb) {
                    if (blue[bb][blue_edges[b][0]] > 0 && blue[bb][blue_edges[b][0]] % 2 == 0) {
                        if (blue[blue_edges[b][0]][blue_edges[b][1]] == 0) {
                            blue[blue_edges[b][0]][blue_edges[b][1]] = blue[bb][blue_edges[b][0]] + 1;
                        }
                        else {
//                            blue[blue_edges[b][0]][blue_edges[b][1]] = Math.max(blue[bb][blue_edges[b][0]] + 1,
//                                    blue[blue_edges[b][0]][blue_edges[b][1]]);
                            blue[blue_edges[b][0]][blue_edges[b][1]] = blue[bb][blue_edges[b][0]] + 1;
                        }

//                        if(blue_edges[b][0] == 5 && blue_edges[b][0] == 1) {
//                            System.out.println("asf");
//                        }

                        if (blue[blue_edges[b][0]][blue_edges[b][1]] > 0) {
                            if (results[blue_edges[b][1]] == 0
                                    || results[blue_edges[b][1]] > blue[blue_edges[b][0]][blue_edges[b][1]]) {
                                results[blue_edges[b][1]] = blue[blue_edges[b][0]][blue_edges[b][1]];
                            }
                        }
                    }
                }
            }

//            if (results[1] > 0) {
//                System.out.println("gt2");
//            }

            for (int r = 0; r < red_edges.length; ++r) {

//        		if (red_edges[r][0] == 4 && red_edges[r][1] == 2) {
//        			System.out.println("asfadsf");
//        		}

                for (int b = 0; b < blue.length; ++b) {
                    if (blue[b][red_edges[r][0]] > 0 && blue[b][red_edges[r][0]] % 2 != 0) {

//	                		if (blue[b][red_edges[r][0]] == 0 && blue[b][red_edges[r][1]] == 4) {
//	                			System.out.println("asfadsf34");
//	                		}

                        if (blue[red_edges[r][0]][red_edges[r][1]] == 0) {
                            blue[red_edges[r][0]][red_edges[r][1]] = blue[b][red_edges[r][0]] + 1;
                        }
                        else {
//                            blue[red_edges[r][0]][red_edges[r][1]] =
//                                    Math.max(blue[red_edges[r][0]][red_edges[r][1]], blue[b][red_edges[r][0]] + 1);

                            blue[red_edges[r][0]][red_edges[r][1]] = blue[b][red_edges[r][0]] + 1;

                        }

//                        if (results[1] > 0) {
//                            System.out.println("gt4");
//                        }

                        if (blue[red_edges[r][0]][red_edges[r][1]] > 0) {
                            if (results[red_edges[r][1]] == 0
                                    || results[red_edges[r][1]] > blue[red_edges[r][0]][red_edges[r][1]]) {
                                results[red_edges[r][1]] = blue[red_edges[r][0]][red_edges[r][1]];
                            }
                        }
                    }
                }
            }
        }

        for (int to = 0; to < n; ++to) {
            if (to == 0) {
                results[to] = 0;
                continue;
            }

            if (results[to] == 0) {
                results[to] = -1;
            }
        }

        return results;
    }

    public int[] shortestAlternatingPaths2(int n, int[][] red_edges, int[][] blue_edges) {
        int[] result = new int[n];
        Arrays.fill(result, -1);

        for (int to = 0; to <= n; ++to) {
            if (to == 0) {
                result[to] = 0;
            }
            else {
                for (int r = 0; r < red_edges.length; ++r) {
                    if (to == red_edges[r][1]) {
                        int hops = getHopsFromRed(red_edges[r], blue_edges, red_edges, 1);
                        if (hops > 0) {
                            if (result[to] > 0) {
                                result[to] = Math.min(result[to], hops);
                            }
                            else {
                                result[to] = hops;
                            }
                        }
                    }
                }

                for (int b = 0; b < blue_edges.length; ++b) {
                    if (to == blue_edges[b][1]) {
                        int hops = getHopsFromBlue(blue_edges[b], blue_edges, red_edges, 1);
                        if (hops > 0) {
                            if (result[to] > 0) {
                                result[to] = Math.min(result[to], hops);
                            }
                            else {
                                result[to] = hops;
                            }
                        }
                    }
                }
            }
        }

        return result;
    }
}
