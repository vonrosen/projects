package org.hunter.leetcode;

import java.util.Arrays;
import java.util.Random;

public class Bloomday {

    public static void main(String[] args) {
//        int [] bloomDay = {7,7,7,7,12,7,7};
//        int m = 2, k = 3;
        //12
//        int [] bloomDay = {1,10,3,10,2};
//        int m = 3, k = 1;
        //3
//        int [] bloomDay = {1,10,3,10,2};
//        int m = 3, k = 2;
        //-1
//        int [] bloomDay = {1000000000,1000000000};
//        int m = 1, k = 1;
        //1000000000
//        int [] bloomDay = {52,59,20,2,50,75,87,38,72,63,83,19,53,37,75,34,53,64,72,100,69,36,30,53,88};
//        int m = 25, k = 1;

//        int [] bloomDay = {1,10,2,9,3,8,4,7,5,6};
//        int m = 4, k = 2;
        //9
//        int [] bloomDay = { 2728,5489,4077,3183,3681,4936,1071,128,5024,1706,1182,5010,1457,4377,5669,3546,2709,4512,5449,2932,3224,1804,5446,3625,3748,2304,291,1483,4222,1598,3993,1916,5409,2665,4501,5478,1657,1099,1730,5215,307,4081,4440,3212,4664,354,765,3138,2042,3805,4533,104,1343,823,309,1890,1277,589,1772,3580,5343,1200,1207,2041,3308,3021,5581,3387,5332,1927,2274,4785,5667,2054,3028,3822,5321,2753,1370,2006,1032,5285,3535,83,1077,2014,2715,4340,4678,3217,1946,1464,2594,4109,4167,1919,842,1756,3716,3075,3455,5432,2433,501,3395,4214,2661,1067,2634,5385,3570,5295,2870,1868,2554,3177,1562,1124,338,4890,3657,3608,2178,4341,682,5418,2766,1656,3766,2243,193,1947,1749,708,1324,4236,335,563,5248,1072,4283,4850,3903,1996,3955,5240,3502,5258,26,2583,4234,1035,4211,2201,2545,3793,3943,5190,1290,3475,5523,2769,4676,3476,1601,1711,1800,686,4547,3000,190,3083,4670,4045,1398,2029,2118,4511,590,4310,709,3788,5678,2316,5070,5262,1605,3489,1682,2391,1909,841,1551,2937,1042,4087,771,5082,794,1599,5604,3667,4447,69,1541,1163,2875,4314,692,259,2438,3720,2003,4737,2319,1740,4497,3910,2143,3316,2970,932,4804,2078,5641,60,2582,459,2956,3913,2573,117,1865,3524,4893,5497,2280,972,5553,3332,1637,3174,2980,1695,1140,866,5304,5235,1331,2761,3780,4878,879,2619,4726,4344,3846,1284,2565,1603,3719,4287,5421,2506,1670,4753,4170,4317,3847,244,2374,2295,1098,3900,378,656,4913,2169,4979,1525,4428,4892,3531,2444,5002,3715,3293,1273,2351,1615,1133,2300,5380,3340,2343,1685,4140,5061,203,746,4078,481,603,1405,4285,2486,4834,4065,4478,4396,4982,1428,1204,5479,4453,5673,2216,3430,2919,5049,2067,4579,1349,2816,5170,4968,993,1976,5325,3187,3964,688,246,1125,5094,1135,2693,4518,4691,5462,3069,861,4827,908,3587,4177,996,2086,4771,2717,696,4408,871,4839,306,6,4406,5314,3663,342,1731,5390,717,3784,4328,3779,3498,3539,1066,1863,2662,587,2347,1093,2922,4822,5286,1308,1737,1836,2145,2146,5231,1141,2273,4996,3499,1247,267,3481,5245,1633,4051,4743,4823,1100,4832,4493,4673,4630,4159,113,280,5108,2132,4768,5423,3044,3420,4571,5287,1971,4228,1491,4454,4651,4739,5206,2056,4473,165,4462,183,772,1689,2484,4240,2435,3736,1235,1315,3781,753,4808,3201,5102,4052,4683,5200,4611,2454,2656,5064,5127,700,2544,149,4740,5138,4265,799,2720,644,114,1846,141,340,3363,4559,4306,2910,3004,3198,1201,2872,2340,350,5305,4908,531,5252,2250,1814,4782,5366,1174,1860,5505,3306,4605,2371,376,930,5106,4769,848,1729,453,1911,467,4787,2035,5016,4138,5067,4851,1195,1608,4076,1420,3277,3093,1216,4013,258,2151,856,5414,2513,4334,14,4875,886,4205,5073,629,5280,543,1390,1113,3264,1451,1462,2933,1710,5542,750,2459,2958,1310,4818,1980,4899,1282,940,4616,4519,297,5317,3901,1302,2271,4010,1329,389,1786,5226,5397,943,840,537,4965,3543,2446,5461,2244,1951,2928,1030,444,2996,421,4229,4978,3342,5637,207,2739,4583,102,4974,2240,1974,2819,1842,5057,230,4451,2348,5233,1346,534,4702,4760,3693,1190,80,4498,5310,2626,5334,2889,4557,2934,1062,4581,1397,30,3611,5058,3877,5103,3945,4520,2226,5398,683,456,3110,1850,5005,1904,1617,774,4289,1990,652,3457,3229,3906,2874,3892,3979,4273,2948,2931,4528,2311,357,720,4750,1983,1538,733,910,5513,1262,1679,4114,5054,2891,2026,3157,4128,360,3471,1023,3885,5441,2602,45,2059,1105,2468,3250,662,1901,624,1928,3813,2284,3677,4638,2066,1984,3087,901,5121,1008,5160,3486,1691,178,4727,3261,4104,186,855,242,825,5267,2209,4438,2268,4275,4864,957,1967,2881,2882,4288,852,5341,1707,3664,3941,5571,1033,2247,4199,826,318,2315,4225,2188,1839,4560,2432,4633,4544,2187,1875,4239,2288,3001,1177,3366,5408,19,1830,1279,5622,572,2134,3769,5011,4071,5069,721,1061,2650,5578,3172,4343,2815,4066,2553,2256,3992,2376,384,3025,1958,3485,1665,4550,1780,3563,2973,5336,2099,633,5348,4747,3291,5549,862,497,1320,569,2541,678,3262,3984,1316,248,2991,2858,4789,4876,4734,3137,2464,1058,5034,5547,4016,5565,5221,742,3447,2253,294,77,1338,3666,505,3926,4584,2323,3095,5404,3789,1595,2668,211,1188,4483,1005,2085,2135,1158,5551,1813,3318,4319,1743,5651,132,3472,4971,2760,33,3249,4941,3158,2589,4507,1943,148,4496,704,1254,3127,3269,2206,5227,2762,3202,4006,162,5517,583,1147,5263,5134,1492,5614,5596,5352,464,53,4046,2011,2349,4995,5131,3355,2895,2897,2064,4347,3653,412,2888,3759,641,329,636,4416,2055,2366,5362,4543,1314,3800,3947,4184,4294,5199,3795,2577,1366,4604,3601,1785,5306,3484,3961,5244,3145,968,4113,3606,4735,1063,3674,4553,2089,169,2260,3726,3507,2025,3629,870,272,4088,5218,1698,1638,1929,2528,1590,4663,4307,1667,4615,5217,1760,4515,79,2777,802,958,2615,3259,4720,3930,1727,1797,1001,156,2406,3311,4837,827,4338,1108,4625,707,4111,3514,4238,1651,2655,5503,4476,3880,796,3591,4897,4059};
//        int m = 5, k = 159;
        //5673

        int [] bloomDay = new int[19131];
        Random rand = new Random();
        for (int i = 0; i < 19131; ++i) {
            bloomDay[i] = rand.nextInt(2000);
        }
        int m = 4498, k = 4;
        //19,131
        System.out.println("begin");
        Bloomday b = new Bloomday();
        System.out.println(b.minDays(bloomDay, m, k));
    }

    public int minDays(int[] bloomDay, int m, int k) {
        int [][] mem = new int[bloomDay.length][m + 1];
        return minDays(0, 0, bloomDay, m, k, mem);
    }

    public int minDays(int start, int bMade, int [] bloomDay, int m, int k, int [][] mem) {
        if (m * k > bloomDay.length) {
            return -1;
        }
        if (bMade >= m) {
            mem[start][bMade] = -1;
            return -1;
        }
        if (bMade > 0 && mem[start][bMade - 1] != 0) {
            return mem[start][bMade - 1];
        }
        int minDays = Integer.MAX_VALUE;
        for (int i = start; i < bloomDay.length; ++i) {
            int daysForI = -1;
            for (int j = i; j < i + k; ++j) {
                if (j >= bloomDay.length) {
                    daysForI = -1;
                    break;
                }
                daysForI = Math.max(daysForI, bloomDay[j]);
            }
            if (daysForI == -1) {
                mem[i][bMade] = Integer.MAX_VALUE;
                continue;
            }
            int totalDaysForI = Integer.MAX_VALUE;
            if (bMade + 1 < m) {
                if (i + k >= bloomDay.length) {
                    mem[i][bMade] = Integer.MAX_VALUE;
                    continue;
                }
                for (int j = i + k; j < bloomDay.length; ++j) {
                    int md;
                    if (mem[j][bMade + 1] != 0) {
                        md = mem[j][bMade + 1];
                    }
                    else {
                        md = minDays(j, bMade + 1, bloomDay, m, k, mem);
                    }
                    totalDaysForI = Math.min(Math.max(md, daysForI), totalDaysForI);
                }
                mem[i][bMade] = totalDaysForI;
                minDays = Math.min(minDays, totalDaysForI);
            }
            else {
                minDays = Math.min(minDays, daysForI);
                mem[i][bMade] = daysForI;
            }
        }
        return minDays;
    }
}
