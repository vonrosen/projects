package org.hunter.leetcode;

public class StoneGame2 {
	public static void main(String [] args) {
//		int [] piles = new int[] {2,7,9,4,4};
//		int [] piles = new int[] {2,7,5};
//		int [] piles = new int [] {1,5,7,9,9};
		//exp = 17		
//		int [] piles = new int [] { 8270,7145,575,5156,5126,2905,8793,7817,5532,5726,7071,7730,5200,5369,5763,7148,8287,9449,7567,4850,1385,2135,1737,9511,8065,7063,8023,7729,7084,8407 };
//		int [] piles = new int [] { 888,6925,1065,2455,5175,1641,7931,7663,9709,2532,1995,7644,6667,4881,5572,2938,4878,6195,5052,502,7866,4836,6423,5618,3170,5135,3127,5660,6771,2171,5974,1598,6315,6230,9327,8812,7855,2471,9691,193,9055,6164,8636,3330,4138};
		//exp = 118396
//		int [] piles = new int [] {5255,5172,860,6605,1200,9410,1194,9808,9161,3440,1567,4940,9114,5695,1683,9723,2255,3284,5519,4432,5509,1211,2222,496,5437,7456,7236,8768,6994,7846,6326,7943,2117,9156,7160,9265,7138,2035,6232,478,412,7464,2432,2607,263,2841,6918,2354,5986,3844};
		//exp = 127559
		//int [] piles = new int [] {1791,748,9041,8221,9119,5291,6796,9879,7401,8126,5160,7988,9974,6598,8067,7249,4434,7987,2586,7039,1310,4047,8948,1885,4260,6601,2002,8810,2900,4047,9536,3274,8349,9048,2009,7204,8079,6698,3671,388,8487,3145,4065,8890,3804,7065,1284,6507,8833,4980,5600,9974,5918,1803,5442};
//		int [] piles = new int [] {5255,5172,860,6605,1200,9410,1194,9808,9161,3440,1567,4940,9114,5695,1683,9723,2255,3284,5519,4432,5509,1211,2222,496,5437,7456,7236,8768,6994,7846,6326,7943,2117,9156,7160,9265,7138,2035,6232,478,412,7464,2432,2607,263,2841,6918,2354,5986,3844};
		int [] piles = new int [] {5819,9551,3626,8100,6991,4067,581,3914,895,9859,3463,4463,851,1993,6596,408,2950,5818,1433,6552,8416,837,7084,5066,1514,6417,9411,9331,5321,7705,1376,6956,6964,2371,5858,9570,6367,9973,7921,2004,8642,8935,861,3857,7807,5708,5020,4558,9641,2286,7931,9637,7542,5899,3814,491,6356,9458,9074,8037,7722,5403,7363,8774,9165,3799,7304,2596,2319,5555,3382,8311,6396,7246,2193,7019,3019,4814,6450,1934,9388,4501,909,215,1656,3799,6611,8907,739,2678,1342,8707,4648,4223,5271,5970,9702,9413,6121,3915};
		
		StoneGame2 s = new StoneGame2();
		System.out.println(s.stoneGameII(piles));		
	}
	
	 public int stoneGameII(int[] piles) {
		 int [][][][] mem = new int[102][100][100][5];
		 int M = 1;		 
		 int [] indices = sum(0, M, mem, 0, piles);
		 return mem[0][indices[0]][indices[1]][0];
	 }
	 
	 public int [] sum(int s, int M, int [][][][] mem, int turn, int [] piles) {
		 if (s > piles.length - 1) {
			 return new int [] { 1, 1 };
		 }		 
		 if (mem[turn][s][M > 99 ? 99 : M][3] > 0 && mem[turn][s][M > 99 ? 99 : M][4] > 0) {
			 return new int [] { mem[turn][s][M > 99 ? 99 : M][3], mem[turn][s][M > 99 ? 99 : M][4] };
		 }
		 int maxM = 2 * M;
		 int maxSum = 0;
		 int [] optMOpponentFinal = new int[2];
		 int [] optM = new int[2];		 
		 for (int m = 1; m <= maxM; ++m) {			 
			 int sum = 0;
			 for (int t = 0; t < m; ++t) {
				 if (s + t > piles.length - 1) {
					 break;
				 }
				 sum += piles[s + t];
			 }				 
			 int [] optMOpponent = sum(s + m, Math.max(m, M), mem, turn + 1, piles);
			 int totalSum = sum + mem[turn + 2][mem[turn + 1][optMOpponent[0]][optMOpponent[1]][1]][mem[turn + 1][optMOpponent[0]][optMOpponent[1]][2]][0];
			 if (totalSum > maxSum) {
				 maxSum = totalSum;
				 optMOpponentFinal = optMOpponent;
				 optM = new int[] { s , M > 99 ? 99: M };
			 }			 			 
		 }		 
		 mem[turn][optM[0]][optM[1]][0] = maxSum;
		 mem[turn][optM[0]][optM[1]][1] = optMOpponentFinal[0];
		 mem[turn][optM[0]][optM[1]][2] = optMOpponentFinal[1];
		 mem[turn][optM[0]][optM[1]][3] = optM[0];
		 mem[turn][optM[0]][optM[1]][4] = optM[1];
		 return optM;
	 }	 
}
